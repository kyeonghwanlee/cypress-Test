import { readdir } from 'fs-extra';
import { logger } from '@app-config/logging';
import { FileSource, defaultAliases } from '@app-config/node';
import { loadValidatedConfig } from '@app-config/config';
/**
 * Loads and validations app-config values in every environment detectable.
 *
 * Uses a hueristic to find which environments are available, because these are arbitrary.
 */
export async function validateAllConfigVariants({ directory = '.', environmentAliases = defaultAliases, includeNoEnvironment = false, } = {}) {
    var _a, _b;
    // first, we have to find any applicable app-config files
    // this is less trivial than config loading, because we can't "assume" the current environment (it could be anything)
    const filesInDirectory = await readdir(directory);
    const appConfigFiles = filesInDirectory.filter((filename) => /^\.app-config\.(?:secrets\.)?(?:.*\.)?(?:yml|yaml|json|json5|toml)$/.exec(filename));
    const appConfigEnvironments = new Set();
    for (const filename of appConfigFiles) {
        // extract the environment out, which is the first capture group
        const regex = /^\.app-config\.(?:secrets\.)?(.*)\.(?:yml|yaml|json|json5|toml)$/;
        const environment = (_a = regex.exec(filename)) === null || _a === void 0 ? void 0 : _a[1];
        if (environment && environment !== 'meta' && environment !== 'schema') {
            appConfigEnvironments.add((_b = environmentAliases[environment]) !== null && _b !== void 0 ? _b : environment);
        }
    }
    await Promise.all(appConfigFiles.map(async (filename) => {
        const parsed = await new FileSource(filename).read();
        parsed.visitAll((value) => {
            var _a, _b;
            const obj = value.asObject();
            if (obj === null || obj === void 0 ? void 0 : obj.$env) {
                for (const key of Object.keys((_a = obj.$env.asObject()) !== null && _a !== void 0 ? _a : {})) {
                    appConfigEnvironments.add((_b = environmentAliases[key]) !== null && _b !== void 0 ? _b : key);
                }
            }
        });
    }));
    // remove special-cased names
    appConfigEnvironments.delete('default');
    appConfigEnvironments.delete('secrets');
    appConfigEnvironments.delete('schema');
    appConfigEnvironments.delete('meta');
    logger.info(`Found ${appConfigEnvironments.size} environments to validate: [${Array.from(appConfigEnvironments).join(', ')}]`);
    for (const environment of appConfigEnvironments) {
        logger.info(`Validating configuration for environment: ${environment}`);
        await loadValidatedConfig({
            directory,
            environmentOverride: environment,
            environmentVariableName: '', // do not load APP_CONFIG
        });
    }
    if (includeNoEnvironment || appConfigEnvironments.size === 0) {
        logger.info(`Validating configuration for no environment`);
        await loadValidatedConfig({
            directory,
            environmentVariableName: '', // do not load APP_CONFIG
        });
    }
}
//# sourceMappingURL=validation.js.map